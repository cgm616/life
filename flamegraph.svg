<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="662" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="645.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="645.00"> </text><svg id="frames" x="10" width="1180"><g><title>AppKit`+[NSApplication sharedApplication] (19 samples, 0.11%)</title><rect x="0.0000%" y="501" width="0.1058%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="511.50"></text></g><g><title>AppKit`-[NSApplication init] (19 samples, 0.11%)</title><rect x="0.0000%" y="485" width="0.1058%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="495.50"></text></g><g><title>OpenGL`0x00007fff6bc3521a (18 samples, 0.10%)</title><rect x="0.2006%" y="149" width="0.1003%" height="15" fill="rgb(221,193,54)"/><text x="0.4506%" y="159.50"></text></g><g><title>OpenGL`0x00007fff6bc35472 (18 samples, 0.10%)</title><rect x="0.2006%" y="133" width="0.1003%" height="15" fill="rgb(248,212,6)"/><text x="0.4506%" y="143.50"></text></g><g><title>AppKit`-[NSOpenGLPixelFormat initWithAttributes:] (22 samples, 0.12%)</title><rect x="0.2006%" y="197" width="0.1226%" height="15" fill="rgb(208,68,35)"/><text x="0.4506%" y="207.50"></text></g><g><title>OpenGL`CGLChoosePixelFormat (22 samples, 0.12%)</title><rect x="0.2006%" y="181" width="0.1226%" height="15" fill="rgb(232,128,0)"/><text x="0.4506%" y="191.50"></text></g><g><title>OpenGL`0x00007fff6bc3bca7 (22 samples, 0.12%)</title><rect x="0.2006%" y="165" width="0.1226%" height="15" fill="rgb(207,160,47)"/><text x="0.4506%" y="175.50"></text></g><g><title>AppKit`-[NSApplication _postDidFinishNotification] (38 samples, 0.21%)</title><rect x="0.2006%" y="309" width="0.2117%" height="15" fill="rgb(228,23,34)"/><text x="0.4506%" y="319.50"></text></g><g><title>Foundation`-[NSNotificationCenter postNotificationName:object:userInfo:] (38 samples, 0.21%)</title><rect x="0.2006%" y="293" width="0.2117%" height="15" fill="rgb(218,30,26)"/><text x="0.4506%" y="303.50"></text></g><g><title>CoreFoundation`_CFXNotificationPost (38 samples, 0.21%)</title><rect x="0.2006%" y="277" width="0.2117%" height="15" fill="rgb(220,122,19)"/><text x="0.4506%" y="287.50"></text></g><g><title>CoreFoundation`_CFXRegistrationPost (38 samples, 0.21%)</title><rect x="0.2006%" y="261" width="0.2117%" height="15" fill="rgb(250,228,42)"/><text x="0.4506%" y="271.50"></text></g><g><title>CoreFoundation`___CFXRegistrationPost_block_invoke (38 samples, 0.21%)</title><rect x="0.2006%" y="245" width="0.2117%" height="15" fill="rgb(240,193,28)"/><text x="0.4506%" y="255.50"></text></g><g><title>CoreFoundation`__CFNOTIFICATIONCENTER_IS_CALLING_OUT_TO_AN_OBSERVER__ (38 samples, 0.21%)</title><rect x="0.2006%" y="229" width="0.2117%" height="15" fill="rgb(216,20,37)"/><text x="0.4506%" y="239.50"></text></g><g><title>main`-[_sapp_macos_app_delegate applicationDidFinishLaunching:] (38 samples, 0.21%)</title><rect x="0.2006%" y="213" width="0.2117%" height="15" fill="rgb(206,188,39)"/><text x="0.4506%" y="223.50"></text></g><g><title>HIToolbox`AEProcessAppleEvent (40 samples, 0.22%)</title><rect x="0.1950%" y="453" width="0.2228%" height="15" fill="rgb(217,207,13)"/><text x="0.4450%" y="463.50"></text></g><g><title>AE`aeProcessAppleEvent (40 samples, 0.22%)</title><rect x="0.1950%" y="437" width="0.2228%" height="15" fill="rgb(231,73,38)"/><text x="0.4450%" y="447.50"></text></g><g><title>AE`0x00007fff264e6eec (40 samples, 0.22%)</title><rect x="0.1950%" y="421" width="0.2228%" height="15" fill="rgb(225,20,46)"/><text x="0.4450%" y="431.50"></text></g><g><title>AE`0x00007fff264e6f6b (40 samples, 0.22%)</title><rect x="0.1950%" y="405" width="0.2228%" height="15" fill="rgb(210,31,41)"/><text x="0.4450%" y="415.50"></text></g><g><title>Foundation`_NSAppleEventManagerGenericHandler (40 samples, 0.22%)</title><rect x="0.1950%" y="389" width="0.2228%" height="15" fill="rgb(221,200,47)"/><text x="0.4450%" y="399.50"></text></g><g><title>Foundation`-[NSAppleEventManager dispatchRawAppleEvent:withRawReply:handlerRefCon:] (40 samples, 0.22%)</title><rect x="0.1950%" y="373" width="0.2228%" height="15" fill="rgb(226,26,5)"/><text x="0.4450%" y="383.50"></text></g><g><title>AppKit`-[NSApplication(NSAppleEventHandling) _handleCoreEvent:withReplyEvent:] (40 samples, 0.22%)</title><rect x="0.1950%" y="357" width="0.2228%" height="15" fill="rgb(249,33,26)"/><text x="0.4450%" y="367.50"></text></g><g><title>AppKit`-[NSApplication(NSAppleEventHandling) _handleAEOpenEvent:] (40 samples, 0.22%)</title><rect x="0.1950%" y="341" width="0.2228%" height="15" fill="rgb(235,183,28)"/><text x="0.4450%" y="351.50"></text></g><g><title>AppKit`-[NSApplication _sendFinishLaunchingNotification] (39 samples, 0.22%)</title><rect x="0.2006%" y="325" width="0.2173%" height="15" fill="rgb(221,5,38)"/><text x="0.4506%" y="335.50"></text></g><g><title>CoreFoundation`CFAbsoluteTimeGetCurrent (71 samples, 0.40%)</title><rect x="0.7131%" y="373" width="0.3955%" height="15" fill="rgb(247,18,42)"/><text x="0.9631%" y="383.50"></text></g><g><title>AppKit`+[NSDisplayTiming(NSDisplayTimingCreation) displayTimingsForActiveScreens] (20 samples, 0.11%)</title><rect x="1.6435%" y="309" width="0.1114%" height="15" fill="rgb(241,131,45)"/><text x="1.8935%" y="319.50"></text></g><g><title>CoreFoundation`CFRunLoopCopyAllModes (27 samples, 0.15%)</title><rect x="1.8663%" y="293" width="0.1504%" height="15" fill="rgb(249,31,29)"/><text x="2.1163%" y="303.50"></text></g><g><title>CoreFoundation`CFSetApplyFunction (27 samples, 0.15%)</title><rect x="1.8663%" y="277" width="0.1504%" height="15" fill="rgb(225,111,53)"/><text x="2.1163%" y="287.50"></text></g><g><title>CoreFoundation`CFBasicHashApply (27 samples, 0.15%)</title><rect x="1.8663%" y="261" width="0.1504%" height="15" fill="rgb(238,160,17)"/><text x="2.1163%" y="271.50"></text></g><g><title>CoreFoundation`CFRunLoopRemoveObserver (37 samples, 0.21%)</title><rect x="2.0167%" y="293" width="0.2061%" height="15" fill="rgb(214,148,48)"/><text x="2.2667%" y="303.50"></text></g><g><title>CoreFoundation`CFRunLoopObserverInvalidate (76 samples, 0.42%)</title><rect x="1.8440%" y="309" width="0.4234%" height="15" fill="rgb(232,36,49)"/><text x="2.0940%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (379 samples, 2.11%)</title><rect x="3.0585%" y="69" width="2.1114%" height="15" fill="rgb(209,103,24)"/><text x="3.3085%" y="79.50">l..</text></g><g><title>IOKit`IOConnectCallStructMethod (385 samples, 2.14%)</title><rect x="3.0529%" y="117" width="2.1448%" height="15" fill="rgb(229,88,8)"/><text x="3.3029%" y="127.50">I..</text></g><g><title>IOKit`IOConnectCallMethod (384 samples, 2.14%)</title><rect x="3.0585%" y="101" width="2.1393%" height="15" fill="rgb(213,181,19)"/><text x="3.3085%" y="111.50">I..</text></g><g><title>IOKit`io_connect_method (384 samples, 2.14%)</title><rect x="3.0585%" y="85" width="2.1393%" height="15" fill="rgb(254,191,54)"/><text x="3.3085%" y="95.50">I..</text></g><g><title>IOAccelerator`IOAccelContextSubmitDataBuffersExt2 (397 samples, 2.21%)</title><rect x="3.0028%" y="133" width="2.2117%" height="15" fill="rgb(241,83,37)"/><text x="3.2528%" y="143.50">I..</text></g><g><title>AMDRadeonX4000GLDriver`glrATI_Hwl_SubmitPacketsWithToken (416 samples, 2.32%)</title><rect x="2.9025%" y="165" width="2.3175%" height="15" fill="rgb(233,36,39)"/><text x="3.1525%" y="175.50">A..</text></g><g><title>libGPUSupportMercury.dylib`gpusSubmitDataBuffers (398 samples, 2.22%)</title><rect x="3.0028%" y="149" width="2.2173%" height="15" fill="rgb(226,3,54)"/><text x="3.2528%" y="159.50">l..</text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (45 samples, 0.25%)</title><rect x="5.2479%" y="149" width="0.2507%" height="15" fill="rgb(245,192,40)"/><text x="5.4979%" y="159.50"></text></g><g><title>SkyLight`SLSFlushSurfaceWithOptionsAndIndex (54 samples, 0.30%)</title><rect x="5.2201%" y="165" width="0.3008%" height="15" fill="rgb(238,167,29)"/><text x="5.4701%" y="175.50"></text></g><g><title>AMDRadeonX4000GLDriver`gldPresentFramebufferData (472 samples, 2.63%)</title><rect x="2.8969%" y="181" width="2.6295%" height="15" fill="rgb(232,182,51)"/><text x="3.1469%" y="191.50">AM..</text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (147 samples, 0.82%)</title><rect x="5.7549%" y="37" width="0.8189%" height="15" fill="rgb(231,60,39)"/><text x="6.0049%" y="47.50"></text></g><g><title>IOKit`IOConnectCallStructMethod (148 samples, 0.82%)</title><rect x="5.7549%" y="85" width="0.8245%" height="15" fill="rgb(208,69,12)"/><text x="6.0049%" y="95.50"></text></g><g><title>IOKit`IOConnectCallMethod (148 samples, 0.82%)</title><rect x="5.7549%" y="69" width="0.8245%" height="15" fill="rgb(235,93,37)"/><text x="6.0049%" y="79.50"></text></g><g><title>IOKit`io_connect_method (148 samples, 0.82%)</title><rect x="5.7549%" y="53" width="0.8245%" height="15" fill="rgb(213,116,39)"/><text x="6.0049%" y="63.50"></text></g><g><title>AMDRadeonX4000GLDriver`glrATI_Hwl_SubmitPacketsWithToken (171 samples, 0.95%)</title><rect x="5.6435%" y="133" width="0.9526%" height="15" fill="rgb(222,207,29)"/><text x="5.8935%" y="143.50"></text></g><g><title>libGPUSupportMercury.dylib`gpusSubmitDataBuffers (161 samples, 0.90%)</title><rect x="5.6992%" y="117" width="0.8969%" height="15" fill="rgb(206,96,30)"/><text x="5.9492%" y="127.50"></text></g><g><title>IOAccelerator`IOAccelContextSubmitDataBuffersExt2 (160 samples, 0.89%)</title><rect x="5.7047%" y="101" width="0.8914%" height="15" fill="rgb(218,138,4)"/><text x="5.9547%" y="111.50"></text></g><g><title>GLEngine`gleDoDrawDispatchCore (37 samples, 0.21%)</title><rect x="6.7632%" y="117" width="0.2061%" height="15" fill="rgb(250,191,14)"/><text x="7.0132%" y="127.50"></text></g><g><title>GLEngine`glDrawArrays_IMM_Exec (49 samples, 0.27%)</title><rect x="6.7019%" y="133" width="0.2730%" height="15" fill="rgb(239,60,40)"/><text x="6.9519%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (27 samples, 0.15%)</title><rect x="7.0752%" y="37" width="0.1504%" height="15" fill="rgb(206,27,48)"/><text x="7.3252%" y="47.50"></text></g><g><title>OpenGL`GLCGetParameter (34 samples, 0.19%)</title><rect x="7.0474%" y="117" width="0.1894%" height="15" fill="rgb(225,35,8)"/><text x="7.2974%" y="127.50"></text></g><g><title>libGPUSupportMercury.dylib`gldGetInteger (32 samples, 0.18%)</title><rect x="7.0585%" y="101" width="0.1783%" height="15" fill="rgb(250,213,24)"/><text x="7.3085%" y="111.50"></text></g><g><title>IOAccelerator`IOAccelDeviceGetSurfaceInfo (31 samples, 0.17%)</title><rect x="7.0641%" y="85" width="0.1727%" height="15" fill="rgb(247,123,22)"/><text x="7.3141%" y="95.50"></text></g><g><title>IOKit`IOConnectCallMethod (29 samples, 0.16%)</title><rect x="7.0752%" y="69" width="0.1616%" height="15" fill="rgb(231,138,38)"/><text x="7.3252%" y="79.50"></text></g><g><title>IOKit`io_connect_method (29 samples, 0.16%)</title><rect x="7.0752%" y="53" width="0.1616%" height="15" fill="rgb(231,145,46)"/><text x="7.3252%" y="63.50"></text></g><g><title>OpenGL`CGLGetParameter (37 samples, 0.21%)</title><rect x="7.0362%" y="133" width="0.2061%" height="15" fill="rgb(251,118,11)"/><text x="7.2862%" y="143.50"></text></g><g><title>AppKit`-[NSIOAccelSurface frontBuffer] (292 samples, 1.63%)</title><rect x="5.6379%" y="149" width="1.6267%" height="15" fill="rgb(217,147,25)"/><text x="5.8879%" y="159.50"></text></g><g><title>AppKit`is_surface_opaque (40 samples, 0.22%)</title><rect x="7.2758%" y="149" width="0.2228%" height="15" fill="rgb(247,81,37)"/><text x="7.5258%" y="159.50"></text></g><g><title>SkyLight`SLSGetSurfaceOpacity (39 samples, 0.22%)</title><rect x="7.2813%" y="133" width="0.2173%" height="15" fill="rgb(209,12,38)"/><text x="7.5313%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (37 samples, 0.21%)</title><rect x="7.2925%" y="117" width="0.2061%" height="15" fill="rgb(227,1,9)"/><text x="7.5425%" y="127.50"></text></g><g><title>IOKit`io_connect_method (32 samples, 0.18%)</title><rect x="7.6713%" y="85" width="0.1783%" height="15" fill="rgb(248,47,43)"/><text x="7.9213%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (31 samples, 0.17%)</title><rect x="7.6769%" y="69" width="0.1727%" height="15" fill="rgb(221,10,30)"/><text x="7.9269%" y="79.50"></text></g><g><title>IOSurface`IOSurfaceClientDecrementUseCount (33 samples, 0.18%)</title><rect x="7.6713%" y="117" width="0.1838%" height="15" fill="rgb(210,229,1)"/><text x="7.9213%" y="127.50"></text></g><g><title>IOKit`IOConnectCallMethod (33 samples, 0.18%)</title><rect x="7.6713%" y="101" width="0.1838%" height="15" fill="rgb(222,148,37)"/><text x="7.9213%" y="111.50"></text></g><g><title>QuartzCore`release_image(_CAImageQueue*, unsigned long, CAImageQueueReleased*, bool) (38 samples, 0.21%)</title><rect x="7.6713%" y="133" width="0.2117%" height="15" fill="rgb(234,67,33)"/><text x="7.9213%" y="143.50"></text></g><g><title>QuartzCore`release_images(_CAImageQueue*, CAImageQueueReleased*) (25 samples, 0.14%)</title><rect x="7.8830%" y="133" width="0.1393%" height="15" fill="rgb(247,98,35)"/><text x="8.1330%" y="143.50"></text></g><g><title>QuartzCore`CAImageQueueCollect_ (69 samples, 0.38%)</title><rect x="7.6490%" y="149" width="0.3844%" height="15" fill="rgb(247,138,52)"/><text x="7.8990%" y="159.50"></text></g><g><title>QuartzCore`CAImageQueueInsertImage (19 samples, 0.11%)</title><rect x="8.0557%" y="149" width="0.1058%" height="15" fill="rgb(213,79,30)"/><text x="8.3057%" y="159.50"></text></g><g><title>QuartzCore`CAImageQueueInsertImage_ (18 samples, 0.10%)</title><rect x="8.0613%" y="133" width="0.1003%" height="15" fill="rgb(246,177,23)"/><text x="8.3113%" y="143.50"></text></g><g><title>SkyLight`SLSGetSurfaceBinding (19 samples, 0.11%)</title><rect x="8.2396%" y="149" width="0.1058%" height="15" fill="rgb(230,62,27)"/><text x="8.4896%" y="159.50"></text></g><g><title>AppKit`-[NSCGLSurface flushRect:] (496 samples, 2.76%)</title><rect x="5.6267%" y="165" width="2.7632%" height="15" fill="rgb(216,154,8)"/><text x="5.8767%" y="175.50">Ap..</text></g><g><title>AppKit`NSCGLSurfaceFlush (535 samples, 2.98%)</title><rect x="5.5320%" y="181" width="2.9805%" height="15" fill="rgb(244,35,45)"/><text x="5.7820%" y="191.50">App..</text></g><g><title>GLEngine`glSwap_Exec (1,017 samples, 5.67%)</title><rect x="2.8858%" y="197" width="5.6657%" height="15" fill="rgb(251,115,12)"/><text x="3.1358%" y="207.50">GLEngin..</text></g><g><title>AppKit`-[NSOpenGLContext flushBuffer] (1,021 samples, 5.69%)</title><rect x="2.8691%" y="229" width="5.6880%" height="15" fill="rgb(240,54,50)"/><text x="3.1191%" y="239.50">AppKit`..</text></g><g><title>OpenGL`CGLFlushDrawable (1,020 samples, 5.68%)</title><rect x="2.8747%" y="213" width="5.6825%" height="15" fill="rgb(233,84,52)"/><text x="3.1247%" y="223.50">OpenGL`..</text></g><g><title>AMDRadeonX4000GLDriver`glrdAMD_RenderVertexArray (28 samples, 0.16%)</title><rect x="8.9471%" y="165" width="0.1560%" height="15" fill="rgb(207,117,47)"/><text x="9.1971%" y="175.50"></text></g><g><title>AMDRadeonX4000GLDriver`glrATI_SI_UpdateHardwareState (40 samples, 0.22%)</title><rect x="9.1421%" y="133" width="0.2228%" height="15" fill="rgb(249,43,39)"/><text x="9.3921%" y="143.50"></text></g><g><title>AMDRadeonX4000GLDriver`gldUpdateDispatch (71 samples, 0.40%)</title><rect x="9.1086%" y="149" width="0.3955%" height="15" fill="rgb(209,38,44)"/><text x="9.3586%" y="159.50"></text></g><g><title>GLEngine`gleUpdateDeferredStateFull (18 samples, 0.10%)</title><rect x="9.5376%" y="149" width="0.1003%" height="15" fill="rgb(236,212,23)"/><text x="9.7876%" y="159.50"></text></g><g><title>GLEngine`gleUpdateDrawFramebufferState (25 samples, 0.14%)</title><rect x="9.6546%" y="149" width="0.1393%" height="15" fill="rgb(242,79,21)"/><text x="9.9046%" y="159.50"></text></g><g><title>libGPUSupportMercury.dylib`gldUpdateDrawFramebuffer (24 samples, 0.13%)</title><rect x="9.6602%" y="133" width="0.1337%" height="15" fill="rgb(211,96,35)"/><text x="9.9102%" y="143.50"></text></g><g><title>GLEngine`gleDoDrawDispatchCoreGL3 (125 samples, 0.70%)</title><rect x="9.1031%" y="165" width="0.6964%" height="15" fill="rgb(253,215,40)"/><text x="9.3531%" y="175.50"></text></g><g><title>GLEngine`glDrawElementsInstanced_ACC_GL3Exec (158 samples, 0.88%)</title><rect x="8.9304%" y="181" width="0.8802%" height="15" fill="rgb(211,81,21)"/><text x="9.1804%" y="191.50"></text></g><g><title>AMDRadeonX4000GLDriver`glrWriteBufferData (367 samples, 2.04%)</title><rect x="10.0279%" y="149" width="2.0446%" height="15" fill="rgb(208,190,38)"/><text x="10.2779%" y="159.50">A..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (347 samples, 1.93%)</title><rect x="10.1393%" y="133" width="1.9331%" height="15" fill="rgb(235,213,38)"/><text x="10.3893%" y="143.50">l..</text></g><g><title>GLEngine`glBufferSubData_Exec (372 samples, 2.07%)</title><rect x="10.0223%" y="165" width="2.0724%" height="15" fill="rgb(237,122,38)"/><text x="10.2723%" y="175.50">G..</text></g><g><title>main`miniquad::graphics::Buffer::update (385 samples, 2.14%)</title><rect x="9.9833%" y="181" width="2.1448%" height="15" fill="rgb(244,218,35)"/><text x="10.2333%" y="191.50">m..</text></g><g><title>main`miniquad::graphics::Context::apply_bindings (24 samples, 0.13%)</title><rect x="12.1281%" y="181" width="0.1337%" height="15" fill="rgb(240,68,47)"/><text x="12.3781%" y="191.50"></text></g><g><title>GLEngine`glUseProgramObjectARB_Exec (26 samples, 0.14%)</title><rect x="12.2841%" y="165" width="0.1448%" height="15" fill="rgb(210,16,53)"/><text x="12.5341%" y="175.50"></text></g><g><title>GLEngine`gleUseProgramObject (20 samples, 0.11%)</title><rect x="12.3175%" y="149" width="0.1114%" height="15" fill="rgb(235,124,12)"/><text x="12.5675%" y="159.50"></text></g><g><title>main`miniquad::graphics::Context::apply_pipeline (31 samples, 0.17%)</title><rect x="12.2618%" y="181" width="0.1727%" height="15" fill="rgb(224,169,11)"/><text x="12.5118%" y="191.50"></text></g><g><title>main`macroquad::Context::perform_render_passes (664 samples, 3.70%)</title><rect x="8.8134%" y="213" width="3.6992%" height="15" fill="rgb(250,166,2)"/><text x="9.0634%" y="223.50">main..</text></g><g><title>main`macroquad::quad_gl::QuadGl::draw (658 samples, 3.67%)</title><rect x="8.8468%" y="197" width="3.6657%" height="15" fill="rgb(242,216,29)"/><text x="9.0968%" y="207.50">main..</text></g><g><title>main`&lt;bitvec::slice::iter::IterOnes&lt;O,T&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.22%)</title><rect x="25.9053%" y="181" width="0.2228%" height="15" fill="rgb(230,116,27)"/><text x="26.1553%" y="191.50"></text></g><g><title>main`core::slice::cmp::_&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (375 samples, 2.09%)</title><rect x="26.1448%" y="181" width="2.0891%" height="15" fill="rgb(228,99,48)"/><text x="26.3948%" y="191.50">m..</text></g><g><title>main`life::moore_neighborhood_wrapping (47 samples, 0.26%)</title><rect x="28.2340%" y="181" width="0.2618%" height="15" fill="rgb(253,11,6)"/><text x="28.4840%" y="191.50"></text></g><g><title>main`macroquad::quad_gl::GlState::model (51 samples, 0.28%)</title><rect x="28.5348%" y="181" width="0.2841%" height="15" fill="rgb(247,143,39)"/><text x="28.7848%" y="191.50"></text></g><g><title>main`&lt;bitvec::slice::iter::IterOnes&lt;O,T&gt; as core::iter::traits::iterator::Iterator&gt;::next (939 samples, 5.23%)</title><rect x="70.2563%" y="165" width="5.2312%" height="15" fill="rgb(236,97,10)"/><text x="70.5063%" y="175.50">main`&lt;..</text></g><g><title>main`bitvec::vec::api::_&lt;impl bitvec::vec::BitVec&lt;O,T&gt;&gt;::extend_with (767 samples, 4.27%)</title><rect x="75.5209%" y="165" width="4.2730%" height="15" fill="rgb(233,208,19)"/><text x="75.7709%" y="175.50">main`..</text></g><g><title>main`main::simulate_step (10,501 samples, 58.50%)</title><rect x="28.8914%" y="181" width="58.5014%" height="15" fill="rgb(216,164,2)"/><text x="29.1414%" y="191.50">main`main::simulate_step</text></g><g><title>main`life::moore_neighborhood_wrapping (1,364 samples, 7.60%)</title><rect x="79.7939%" y="165" width="7.5989%" height="15" fill="rgb(220,129,5)"/><text x="80.0439%" y="175.50">main`life:..</text></g><g><title>GLEngine`glClear_Exec (19 samples, 0.11%)</title><rect x="87.4095%" y="165" width="0.1058%" height="15" fill="rgb(242,17,10)"/><text x="87.6595%" y="175.50"></text></g><g><title>main`miniquad::graphics::Context::begin_pass (27 samples, 0.15%)</title><rect x="87.3928%" y="181" width="0.1504%" height="15" fill="rgb(242,107,0)"/><text x="87.6428%" y="191.50"></text></g><g><title>main`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (13,468 samples, 75.03%)</title><rect x="12.5181%" y="197" width="75.0306%" height="15" fill="rgb(251,28,31)"/><text x="12.7681%" y="207.50">main`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>main`macroquad::exec::resume (13,493 samples, 75.17%)</title><rect x="12.5181%" y="213" width="75.1699%" height="15" fill="rgb(233,223,10)"/><text x="12.7681%" y="223.50">main`macroquad::exec::resume</text></g><g><title>main`&lt;macroquad::Stage as miniquad::event::EventHandlerFree&gt;::draw (14,193 samples, 79.07%)</title><rect x="8.6574%" y="229" width="79.0696%" height="15" fill="rgb(215,21,27)"/><text x="8.9074%" y="239.50">main`&lt;macroquad::Stage as miniquad::event::EventHandlerFree&gt;::draw</text></g><g><title>main`-[_sapp_macos_view drawRect:] (15,279 samples, 85.12%)</title><rect x="2.8691%" y="245" width="85.1198%" height="15" fill="rgb(232,23,21)"/><text x="3.1191%" y="255.50">main`-[_sapp_macos_view drawRect:]</text></g><g><title>main`miniquad::init (36 samples, 0.20%)</title><rect x="87.7883%" y="229" width="0.2006%" height="15" fill="rgb(244,5,23)"/><text x="88.0383%" y="239.50"></text></g><g><title>main`core::ops::function::FnOnce::call_once{{vtable.shim}} (36 samples, 0.20%)</title><rect x="87.7883%" y="213" width="0.2006%" height="15" fill="rgb(226,81,46)"/><text x="88.0383%" y="223.50"></text></g><g><title>main`macroquad::Context::new (36 samples, 0.20%)</title><rect x="87.7883%" y="197" width="0.2006%" height="15" fill="rgb(247,70,30)"/><text x="88.0383%" y="207.50"></text></g><g><title>AppKit`-[_NSOpenGLViewBackingLayer display] (15,339 samples, 85.45%)</title><rect x="2.5460%" y="261" width="85.4540%" height="15" fill="rgb(212,68,19)"/><text x="2.7960%" y="271.50">AppKit`-[_NSOpenGLViewBackingLayer display]</text></g><g><title>QuartzCore`CA::Layer::display_if_needed (15,374 samples, 85.65%)</title><rect x="2.4791%" y="277" width="85.6490%" height="15" fill="rgb(240,187,13)"/><text x="2.7291%" y="287.50">QuartzCore`CA::Layer::display_if_needed</text></g><g><title>QuartzCore`CA::Render::Message::send_message (105 samples, 0.58%)</title><rect x="88.1727%" y="261" width="0.5850%" height="15" fill="rgb(223,113,26)"/><text x="88.4227%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (104 samples, 0.58%)</title><rect x="88.1783%" y="245" width="0.5794%" height="15" fill="rgb(206,192,2)"/><text x="88.4283%" y="255.50"></text></g><g><title>QuartzCore`CA::Render::Encoder::send_message (109 samples, 0.61%)</title><rect x="88.1616%" y="277" width="0.6072%" height="15" fill="rgb(241,108,4)"/><text x="88.4116%" y="287.50"></text></g><g><title>QuartzCore`CA::Transaction::run_commit_handlers (18 samples, 0.10%)</title><rect x="88.8134%" y="277" width="0.1003%" height="15" fill="rgb(247,173,49)"/><text x="89.0634%" y="287.50"></text></g><g><title>libdispatch.dylib`_dispatch_event_loop_poke (40 samples, 0.22%)</title><rect x="88.9805%" y="277" width="0.2228%" height="15" fill="rgb(224,114,35)"/><text x="89.2305%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`kevent_id (39 samples, 0.22%)</title><rect x="88.9861%" y="261" width="0.2173%" height="15" fill="rgb(245,159,27)"/><text x="89.2361%" y="271.50"></text></g><g><title>QuartzCore`CA::Context::commit_transaction (15,645 samples, 87.16%)</title><rect x="2.2953%" y="293" width="87.1588%" height="15" fill="rgb(245,172,44)"/><text x="2.5453%" y="303.50">QuartzCore`CA::Context::commit_transaction</text></g><g><title>AppKit`-[NSView displayIfNeeded] (44 samples, 0.25%)</title><rect x="89.7103%" y="213" width="0.2451%" height="15" fill="rgb(236,23,11)"/><text x="89.9603%" y="223.50"></text></g><g><title>AppKit`NSWindowUpdateLayerTree (30 samples, 0.17%)</title><rect x="90.0223%" y="213" width="0.1671%" height="15" fill="rgb(205,117,38)"/><text x="90.2723%" y="223.50"></text></g><g><title>AppKit`-[NSWindow displayIfNeeded] (95 samples, 0.53%)</title><rect x="89.6992%" y="229" width="0.5292%" height="15" fill="rgb(237,72,25)"/><text x="89.9492%" y="239.50"></text></g><g><title>AppKit`__NSWindowGetDisplayCycleObserverForDisplay_block_invoke (113 samples, 0.63%)</title><rect x="89.6156%" y="245" width="0.6295%" height="15" fill="rgb(244,70,9)"/><text x="89.8656%" y="255.50"></text></g><g><title>AppKit`NSDisplayCycleObserverInvoke (121 samples, 0.67%)</title><rect x="89.6100%" y="261" width="0.6741%" height="15" fill="rgb(217,125,39)"/><text x="89.8600%" y="271.50"></text></g><g><title>AppKit`NSDisplayCycleFlush (143 samples, 0.80%)</title><rect x="89.5320%" y="277" width="0.7967%" height="15" fill="rgb(235,36,10)"/><text x="89.7820%" y="287.50"></text></g><g><title>QuartzCore`CA::Transaction::run_commit_handlers (150 samples, 0.84%)</title><rect x="89.5209%" y="293" width="0.8357%" height="15" fill="rgb(251,123,47)"/><text x="89.7709%" y="303.50"></text></g><g><title>QuartzCore`CA::Transaction::commit (15,828 samples, 88.18%)</title><rect x="2.2841%" y="309" width="88.1783%" height="15" fill="rgb(221,13,13)"/><text x="2.5341%" y="319.50">QuartzCore`CA::Transaction::commit</text></g><g><title>AppKit`__62+[CATransaction(NSCATransaction) NS_setFlushesWithDisplayLink]_block_invoke (15,958 samples, 88.90%)</title><rect x="1.6045%" y="325" width="88.9025%" height="15" fill="rgb(238,131,9)"/><text x="1.8545%" y="335.50">AppKit`__62+[CATransaction(NSCATransaction) NS_setFlushesWithDisplayLink]_block_invoke</text></g><g><title>AppKit`___NSRunLoopObserverCreateWithHandler_block_invoke (15,966 samples, 88.95%)</title><rect x="1.5933%" y="341" width="88.9471%" height="15" fill="rgb(211,50,8)"/><text x="1.8433%" y="351.50">AppKit`___NSRunLoopObserverCreateWithHandler_block_invoke</text></g><g><title>CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ (15,995 samples, 89.11%)</title><rect x="1.5320%" y="357" width="89.1086%" height="15" fill="rgb(245,182,24)"/><text x="1.7820%" y="367.50">CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__</text></g><g><title>CoreFoundation`__CFRunLoopDoObservers (16,054 samples, 89.44%)</title><rect x="1.3705%" y="373" width="89.4373%" height="15" fill="rgb(242,14,37)"/><text x="1.6205%" y="383.50">CoreFoundation`__CFRunLoopDoObservers</text></g><g><title>CoreFoundation`-[__NSArrayM dealloc] (29 samples, 0.16%)</title><rect x="90.9471%" y="357" width="0.1616%" height="15" fill="rgb(246,228,12)"/><text x="91.1971%" y="367.50"></text></g><g><title>CoreFoundation`-[__NSArrayM insertObject:atIndex:] (29 samples, 0.16%)</title><rect x="91.1086%" y="357" width="0.1616%" height="15" fill="rgb(213,55,15)"/><text x="91.3586%" y="367.50"></text></g><g><title>CoreFoundation`CFRunLoopRemoveTimer (27 samples, 0.15%)</title><rect x="91.6156%" y="325" width="0.1504%" height="15" fill="rgb(209,9,3)"/><text x="91.8656%" y="335.50"></text></g><g><title>CoreFoundation`CFRunLoopTimerInvalidate (34 samples, 0.19%)</title><rect x="91.5877%" y="341" width="0.1894%" height="15" fill="rgb(230,59,30)"/><text x="91.8377%" y="351.50"></text></g><g><title>AppKit`-[NSView _setLayerNeedsDisplayInViewRect:] (67 samples, 0.37%)</title><rect x="92.1838%" y="277" width="0.3733%" height="15" fill="rgb(209,121,21)"/><text x="92.4338%" y="287.50"></text></g><g><title>QuartzCore`-[CALayer setNeedsDisplay] (50 samples, 0.28%)</title><rect x="92.2786%" y="261" width="0.2786%" height="15" fill="rgb(220,109,13)"/><text x="92.5286%" y="271.50"></text></g><g><title>AppKit`+[CATransaction(NSCATransaction) NS_setFlushesWithDisplayLink] (20 samples, 0.11%)</title><rect x="92.5961%" y="245" width="0.1114%" height="15" fill="rgb(232,18,1)"/><text x="92.8461%" y="255.50"></text></g><g><title>AppKit`+[NSDisplayCycle currentDisplayCycle] (39 samples, 0.22%)</title><rect x="92.5850%" y="261" width="0.2173%" height="15" fill="rgb(215,41,42)"/><text x="92.8350%" y="271.50"></text></g><g><title>AppKit`-[NSWindow(NSDisplayCycle) _postWindowNeedsDisplayUnlessPostingDisabled] (54 samples, 0.30%)</title><rect x="92.5794%" y="277" width="0.3008%" height="15" fill="rgb(224,123,36)"/><text x="92.8294%" y="287.50"></text></g><g><title>AppKit`-[NSView setNeedsDisplayInRect:] (164 samples, 0.91%)</title><rect x="92.1114%" y="293" width="0.9136%" height="15" fill="rgb(240,125,3)"/><text x="92.3614%" y="303.50"></text></g><g><title>AppKit`-[NSView setNeedsDisplay:] (181 samples, 1.01%)</title><rect x="92.0613%" y="309" width="1.0084%" height="15" fill="rgb(205,98,50)"/><text x="92.3113%" y="319.50"></text></g><g><title>Foundation`__NSFireTimer (205 samples, 1.14%)</title><rect x="91.9944%" y="325" width="1.1421%" height="15" fill="rgb(205,185,37)"/><text x="92.2444%" y="335.50"></text></g><g><title>CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ (252 samples, 1.40%)</title><rect x="91.9109%" y="341" width="1.4039%" height="15" fill="rgb(238,207,15)"/><text x="92.1609%" y="351.50"></text></g><g><title>CoreFoundation`__CFRepositionTimerInMode (96 samples, 0.53%)</title><rect x="93.3148%" y="341" width="0.5348%" height="15" fill="rgb(213,199,42)"/><text x="93.5648%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`mk_timer_arm (45 samples, 0.25%)</title><rect x="93.5989%" y="325" width="0.2507%" height="15" fill="rgb(235,201,11)"/><text x="93.8489%" y="335.50"></text></g><g><title>CoreFoundation`CFBasicHashFindBucket (24 samples, 0.13%)</title><rect x="93.8663%" y="309" width="0.1337%" height="15" fill="rgb(207,46,11)"/><text x="94.1163%" y="319.50"></text></g><g><title>CoreFoundation`CFSetGetValue (35 samples, 0.19%)</title><rect x="93.8663%" y="325" width="0.1950%" height="15" fill="rgb(241,35,35)"/><text x="94.1163%" y="335.50"></text></g><g><title>CoreFoundation`__CFRunLoopCopyMode (51 samples, 0.28%)</title><rect x="93.8496%" y="341" width="0.2841%" height="15" fill="rgb(243,32,47)"/><text x="94.0996%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`mk_timer_arm (57 samples, 0.32%)</title><rect x="94.3064%" y="341" width="0.3175%" height="15" fill="rgb(247,202,23)"/><text x="94.5564%" y="351.50"></text></g><g><title>CoreFoundation`__CFRunLoopDoTimer (581 samples, 3.24%)</title><rect x="91.4652%" y="357" width="3.2368%" height="15" fill="rgb(219,102,11)"/><text x="91.7152%" y="367.50">Cor..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (23 samples, 0.13%)</title><rect x="94.7855%" y="277" width="0.1281%" height="15" fill="rgb(243,110,44)"/><text x="95.0355%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (35 samples, 0.19%)</title><rect x="94.7744%" y="309" width="0.1950%" height="15" fill="rgb(222,74,54)"/><text x="95.0244%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (35 samples, 0.19%)</title><rect x="94.7744%" y="293" width="0.1950%" height="15" fill="rgb(216,99,12)"/><text x="95.0244%" y="303.50"></text></g><g><title>libobjc.A.dylib`class_createInstance (55 samples, 0.31%)</title><rect x="94.7744%" y="325" width="0.3064%" height="15" fill="rgb(226,22,26)"/><text x="95.0244%" y="335.50"></text></g><g><title>CoreFoundation`__CFAllocateObject (66 samples, 0.37%)</title><rect x="94.7632%" y="341" width="0.3677%" height="15" fill="rgb(217,163,10)"/><text x="95.0132%" y="351.50"></text></g><g><title>CoreFoundation`__NSArrayM_new (72 samples, 0.40%)</title><rect x="94.7521%" y="357" width="0.4011%" height="15" fill="rgb(213,25,53)"/><text x="95.0021%" y="367.50"></text></g><g><title>CoreFoundation`__CFRunLoopDoTimers (802 samples, 4.47%)</title><rect x="90.8914%" y="373" width="4.4680%" height="15" fill="rgb(252,105,26)"/><text x="91.1414%" y="383.50">CoreF..</text></g><g><title>CoreFoundation`__CFRunLoopModeIsEmpty (21 samples, 0.12%)</title><rect x="95.3593%" y="373" width="0.1170%" height="15" fill="rgb(220,39,43)"/><text x="95.6093%" y="383.50"></text></g><g><title>CoreFoundation`__CFRunLoopServiceMachPort (313 samples, 1.74%)</title><rect x="95.4763%" y="373" width="1.7437%" height="15" fill="rgb(229,68,48)"/><text x="95.7263%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (269 samples, 1.50%)</title><rect x="95.7214%" y="357" width="1.4986%" height="15" fill="rgb(252,8,32)"/><text x="95.9714%" y="367.50"></text></g><g><title>libobjc.A.dylib`objc_msgSend (22 samples, 0.12%)</title><rect x="97.2702%" y="373" width="0.1226%" height="15" fill="rgb(223,20,43)"/><text x="97.5202%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_port_extract_member_trap (74 samples, 0.41%)</title><rect x="97.4318%" y="373" width="0.4123%" height="15" fill="rgb(229,81,49)"/><text x="97.6818%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_port_insert_member_trap (89 samples, 0.50%)</title><rect x="97.8440%" y="373" width="0.4958%" height="15" fill="rgb(236,28,36)"/><text x="98.0940%" y="383.50"></text></g><g><title>CoreFoundation`__CFRunLoopRun (17,595 samples, 98.02%)</title><rect x="0.5571%" y="389" width="98.0223%" height="15" fill="rgb(249,185,26)"/><text x="0.8071%" y="399.50">CoreFoundation`__CFRunLoopRun</text></g><g><title>CoreFoundation`CFRunLoopRunSpecific (17,612 samples, 98.12%)</title><rect x="0.5070%" y="405" width="98.1170%" height="15" fill="rgb(249,174,33)"/><text x="0.7570%" y="415.50">CoreFoundation`CFRunLoopRunSpecific</text></g><g><title>HIToolbox`RunCurrentEventLoopInMode (17,619 samples, 98.16%)</title><rect x="0.5070%" y="421" width="98.1560%" height="15" fill="rgb(233,201,37)"/><text x="0.7570%" y="431.50">HIToolbox`RunCurrentEventLoopInMode</text></g><g><title>AppKit`-[NSApplication run] (17,692 samples, 98.56%)</title><rect x="0.1058%" y="501" width="98.5627%" height="15" fill="rgb(221,78,26)"/><text x="0.3558%" y="511.50">AppKit`-[NSApplication run]</text></g><g><title>AppKit`-[NSApplication(NSEvent) _nextEventMatchingEventMask:untilDate:inMode:dequeue:] (17,682 samples, 98.51%)</title><rect x="0.1616%" y="485" width="98.5070%" height="15" fill="rgb(250,127,30)"/><text x="0.4116%" y="495.50">AppKit`-[NSApplication(NSEvent) _nextEventMatchingEventMask:untilDate:inMode:dequeue:]</text></g><g><title>AppKit`_DPSNextEvent (17,677 samples, 98.48%)</title><rect x="0.1894%" y="469" width="98.4791%" height="15" fill="rgb(230,49,44)"/><text x="0.4394%" y="479.50">AppKit`_DPSNextEvent</text></g><g><title>HIToolbox`_BlockUntilNextEventMatchingListInModeWithFilter (17,636 samples, 98.25%)</title><rect x="0.4178%" y="453" width="98.2507%" height="15" fill="rgb(229,67,23)"/><text x="0.6678%" y="463.50">HIToolbox`_BlockUntilNextEventMatchingListInModeWithFilter</text></g><g><title>HIToolbox`ReceiveNextEventCommon (17,636 samples, 98.25%)</title><rect x="0.4178%" y="437" width="98.2507%" height="15" fill="rgb(249,83,47)"/><text x="0.6678%" y="447.50">HIToolbox`ReceiveNextEventCommon</text></g><g><title>0x1 (17,715 samples, 98.69%)</title><rect x="0.0000%" y="597" width="98.6908%" height="15" fill="rgb(215,43,3)"/><text x="0.2500%" y="607.50">0x1</text></g><g><title>libdyld.dylib`start (17,715 samples, 98.69%)</title><rect x="0.0000%" y="581" width="98.6908%" height="15" fill="rgb(238,154,13)"/><text x="0.2500%" y="591.50">libdyld.dylib`start</text></g><g><title>main`main (17,715 samples, 98.69%)</title><rect x="0.0000%" y="565" width="98.6908%" height="15" fill="rgb(219,56,2)"/><text x="0.2500%" y="575.50">main`main</text></g><g><title>main`std::sys_common::backtrace::__rust_begin_short_backtrace (17,715 samples, 98.69%)</title><rect x="0.0000%" y="549" width="98.6908%" height="15" fill="rgb(233,0,4)"/><text x="0.2500%" y="559.50">main`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>main`main::main (17,715 samples, 98.69%)</title><rect x="0.0000%" y="533" width="98.6908%" height="15" fill="rgb(235,30,7)"/><text x="0.2500%" y="543.50">main`main::main</text></g><g><title>main`sapp_run (17,715 samples, 98.69%)</title><rect x="0.0000%" y="517" width="98.6908%" height="15" fill="rgb(250,79,13)"/><text x="0.2500%" y="527.50">main`sapp_run</text></g><g><title>libsystem_kernel.dylib`__workq_kernreturn (81 samples, 0.45%)</title><rect x="98.7298%" y="581" width="0.4513%" height="15" fill="rgb(211,146,34)"/><text x="98.9798%" y="591.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_invoke (19 samples, 0.11%)</title><rect x="99.2702%" y="549" width="0.1058%" height="15" fill="rgb(228,22,38)"/><text x="99.5202%" y="559.50"></text></g><g><title>libsystem_pthread.dylib`start_wqthread (125 samples, 0.70%)</title><rect x="98.6908%" y="597" width="0.6964%" height="15" fill="rgb(235,168,5)"/><text x="98.9408%" y="607.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_wqthread (37 samples, 0.21%)</title><rect x="99.1811%" y="581" width="0.2061%" height="15" fill="rgb(221,155,16)"/><text x="99.4311%" y="591.50"></text></g><g><title>libdispatch.dylib`_dispatch_workloop_worker_thread (31 samples, 0.17%)</title><rect x="99.2145%" y="565" width="0.1727%" height="15" fill="rgb(215,215,53)"/><text x="99.4645%" y="575.50"></text></g><g><title>CoreAudio`0x0000000116a406c4 (31 samples, 0.17%)</title><rect x="99.4708%" y="501" width="0.1727%" height="15" fill="rgb(223,4,10)"/><text x="99.7208%" y="511.50"></text></g><g><title>main`coreaudio::audio_unit::render_callback::_&lt;impl coreaudio::audio_unit::AudioUnit&gt;::set_render_callback::_{{closure}} (24 samples, 0.13%)</title><rect x="99.5097%" y="485" width="0.1337%" height="15" fill="rgb(234,103,6)"/><text x="99.7597%" y="495.50"></text></g><g><title>CoreAudio`0x0000000116a663d4 (38 samples, 0.21%)</title><rect x="99.4708%" y="517" width="0.2117%" height="15" fill="rgb(227,97,0)"/><text x="99.7208%" y="527.50"></text></g><g><title>CoreAudio`0x0000000116a434f2 (45 samples, 0.25%)</title><rect x="99.4485%" y="533" width="0.2507%" height="15" fill="rgb(234,150,53)"/><text x="99.6985%" y="543.50"></text></g><g><title>CoreAudio`HALB_MachPort::SendSimpleMessageWithSimpleReply (41 samples, 0.23%)</title><rect x="99.6992%" y="533" width="0.2284%" height="15" fill="rgb(228,201,54)"/><text x="99.9492%" y="543.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (37 samples, 0.21%)</title><rect x="99.7214%" y="517" width="0.2061%" height="15" fill="rgb(222,22,37)"/><text x="99.9714%" y="527.50"></text></g><g><title>all (17,950 samples, 100%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(237,53,32)"/><text x="0.2500%" y="623.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (110 samples, 0.61%)</title><rect x="99.3872%" y="597" width="0.6128%" height="15" fill="rgb(233,25,53)"/><text x="99.6372%" y="607.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_start (110 samples, 0.61%)</title><rect x="99.3872%" y="581" width="0.6128%" height="15" fill="rgb(210,40,34)"/><text x="99.6372%" y="591.50"></text></g><g><title>CoreAudio`HALB_IOThread::Entry (103 samples, 0.57%)</title><rect x="99.4262%" y="565" width="0.5738%" height="15" fill="rgb(241,220,44)"/><text x="99.6762%" y="575.50"></text></g><g><title>CoreAudio`invocation function for block in HALC_ProxyIOContext::HALC_ProxyIOContext (101 samples, 0.56%)</title><rect x="99.4373%" y="549" width="0.5627%" height="15" fill="rgb(235,28,35)"/><text x="99.6873%" y="559.50"></text></g></svg></svg>